// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")        // Data Proxy at runtime
  directUrl  = env("DIRECT_DATABASE_URL") // Neon direct for migrations
}


model AdminUser {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}

model Property {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  location    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  apartments  Apartment[]
  images      PropertyImage[]
}

model Apartment {
  id          Int      @id @default(autoincrement())
  propertyId  Int
  name        String
  description String?
  bedrooms    Int
  bathrooms   Int
  maxGuests   Int
  pricePerNight Decimal @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  rooms       Room[]
  images      ApartmentImage[]
  bookings    Booking[]
  amenities   ApartmentAmenity[]
}

model Room {
  id          Int      @id @default(autoincrement())
  apartmentId Int
  name        String
  description String?
  bedType     String
  pricePerNight Decimal @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  images      RoomImage[]
  bookings    Booking[]
  amenities   RoomAmenity[]
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  propertyId Int
  imageUrl   String
  altText    String?
  isMain     Boolean  @default(false)
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model ApartmentImage {
  id          Int      @id @default(autoincrement())
  apartmentId Int
  imageUrl    String
  altText     String?
  isMain      Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
}

model RoomImage {
  id        Int      @id @default(autoincrement())
  roomId    Int
  imageUrl  String
  altText   String?
  isMain    Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  
  room      Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Amenity {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  icon        String?
  description String?
  createdAt   DateTime @default(now())
  
  apartments  ApartmentAmenity[]
  rooms       RoomAmenity[]
}

model ApartmentAmenity {
  apartmentId Int
  amenityId   Int
  
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  amenity     Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  
  @@id([apartmentId, amenityId])
}

model RoomAmenity {
  roomId    Int
  amenityId Int
  
  room      Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  
  @@id([roomId, amenityId])
}

model Guest {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  address   String?
  city      String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  bookings  Booking[]
}

model Booking {
  id          Int      @id @default(autoincrement())
  guestId     Int
  apartmentId Int?
  roomId      Int?
  checkIn     DateTime
  checkOut    DateTime
  guests      Int
  totalAmount Decimal  @db.Decimal(10, 2)
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  guest       Guest @relation(fields: [guestId], references: [id])
  apartment   Apartment? @relation(fields: [apartmentId], references: [id])
  room        Room? @relation(fields: [roomId], references: [id])
  
  @@index([checkIn, checkOut])
  @@index([status])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}
